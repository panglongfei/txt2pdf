# 项目背景
这是一个基于Python Flask的Web应用程序，用于[具体应用场景]。

# 编码标准
- 使用PEP 8编码风格。
- 变量和函数名使用小写字母加下划线的方式命名，如：def my_function(): 。
- 类名使用大驼峰命名法，如：class MyClass: 。

# 首选的库和框架
- 使用Flask作为主要的Web框架。
- 使用SQLAlchemy进行数据库操作。
- 使用Marshmallow进行数据序列化和反序列化。

# 文件结构
- app/：主应用目录
    - __init__.py：Flask应用初始化文件
    - routes.py：定义路由和视图函数
    - models.py：数据库模型定义
    - schemas.py：数据序列化和反序列化的模式定义
- migrations/：数据库迁移脚本目录
- tests/：测试目录
    - test_routes.py：路由和视图函数的测试用例
    - test_models.py：数据库模型的测试用例

# 性能优化指南
- 对频繁访问的数据库查询结果进行缓存。
- 优化SQL查询语句，避免不必要的全表扫描。
- 使用异步编程来提高并发处理能力，如使用Flask的异步扩展。

# 测试要求
- 使用pytest框架编写单元测试。
- 测试覆盖率应至少达到80%。
- 对数据库操作和主要业务逻辑进行功能测试和边界测试。

# 文档规范
- 使用docstrings为函数、类和模块添加注释，遵循PEP 257规范。
- 每个主要模块和函数都应该有详细的说明，包括功能、参数、返回值和可能抛出的异常。
- 在项目根目录下创建README.md文件，包含项目的概述、安装说明、使用方法和贡献指南等。

# 错误处理偏好
- 在Flask应用中使用全局的异常处理机制，捕获并处理常见的HTTP错误和内部服务器错误。
- 对于数据库操作和外部API调用，使用try/except块进行错误捕获，并根据具体情况进行适当的处理和日志记录。